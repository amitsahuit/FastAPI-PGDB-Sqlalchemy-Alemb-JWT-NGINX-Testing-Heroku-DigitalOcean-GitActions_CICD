name: Build and Deploy Fastapi code
on: [push, pull_request] # activates on pushing and pulling code from all branches
  # push:
  #   branches:
  #     - "main"
  #     - "another_branch"
  # pull_request:
  #   branches:
  #     - "test_branch"

# Global env variable accessible from all jobs
# env:
#   DATABASE_HOSTNAME=localhost

jobs:
  fastapiJob1:
    # Job specific env variable.
    env:
      DATABASE_USERNAME=postgres
      DATABASE_PASSWORD=sys
      DATABASE_HOSTNAME=localhost
      DATABASE_PORT=5432
      DATABASE_NAME=fastapidb1
      SECRET_KEY=09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7
      ALGORITHM=HS256
      ACCESS_TOKEN_EXPIRE_MINUTES=30
    runs-on: ubuntu-latest
    steps:
      # - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event." # Unix commands
      # - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      # - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: pulling git repo
        uses: actions/checkout@v2 # searched with checkout keyword in MARKETPLACE
      # - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      # - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      # - name: List files in the repository
      #   run: |
      #     ls ${{ github.workspace }}
      - name: Install python latest version
        uses: actions/setup-python@v2 # copied from https://github.com/marketplace/actions/setup-python
        with:
          python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          # architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: install all dependencies
        run: pip install -r requirements.txt
      - name: installing pytest
        run: pip install pytest
          # pip install pytest
          # pytest
      - name: Executing test cases
        run:  pytest # Or we can use pytest -v -s
      - run: echo "üçè This job's status is ${{ job.status }}."
